# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- develop

resources:
- repo: self

pool:
  vmImage: ubuntu-latest

variables:
- name: system.debug
  value: true

- name: resourceGroupName
  value: 'on-premise'

- name: templateFile
  value: './templates/func-kv.bicep'

- name: azureServiceConnection
  value: 'ARM2'

- name: func-name
  value: 'func-softimply-serverping'

stages:
- stage: OnPremise
  jobs:
  - job: OnPremise
    steps:
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $path = "src/on-premise/appsettings.json"
          $content = Get-Content -Path $path | ConvertFrom-Json
          $content.ElasticConfiguration.URI = "$(ElasticUri)"
          $content | ConvertTo-Json -Depth 5 | Set-Content -path $path

    - task: PowerShell@2
      condition: eq(variables['system.debug'], 'true')
      inputs:
        targetType: inline
        script: |
          $path = "src/on-premise/appsettings.json"
          $content = Get-Content -Path $path -raw
          Write-Verbose -Verbose "Contents of appsettings:"
          Write-Verbose -Verbose $content

    - task: Docker@2
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'softimply/basichealthservice'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: | 
          $(Build.BuildNumber)
          latest

- stage: Azure
  jobs:  
  - job: Provision
    steps:
      - task: AzureCLI@2
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |          
            az deployment group create --resource-group $(resourceGroupName) --template-file $(templateFile)
    
  - job: Build
    dependsOn: Provision
    steps:
      - task: DotNetCoreCLI@2
        inputs:
          command: 'build'
          projects: |
            src/FuncCheckServerStatus/*.csproj
          arguments: --output $(System.DefaultWorkingDirectory)/$(func-name) --configuration Release

      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/$(func-name)'
          includeRootFolder: false
          archiveType: zip
          archiveFile: $(Build.ArtifactStagingDirectory)/$(func-name).zip
          replaceExistingArchive: true

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'artifacts'
          publishLocation: 'Container'
  
  - deployment: Deploy
    dependsOn: Provision
    environment: $(func-name)
    strategy:      
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              appType: functionApp
              appName: $(func-name)
              package: '$(Pipeline.Workspace)/artifacts/$(func-name).zip'
